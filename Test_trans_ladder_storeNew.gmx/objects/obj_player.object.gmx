<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hspeed = 0;
depth=10;
vsp = 0;
grav = 0.5;
grounded = 0;
flag=false;
//regular world is 0, apoc world is 1
globalvar current_room;
current_room=0;
//globalvar doorOpenNOKey;
//doorOpenNOKey=0;
allow_restart=0;
globalvar space_check;
globalvar allow_clock;
allow_clock=false;
space_check = false;
globalvar keyget;
keyget=0;
slotspace=32;
currentslot=0;                
globalvar disablekey;
disablekey=0;
checkfall=0;
//global.inventory[0]=0;      //1 is for keys, 2 is for tree
globalvar inventoryIndex; /// find  debug array
globalvar doorOpen;
globalvar GameOver;
GameOver=0;
doorOpen=0;
inventoryIndex=0;

globalvar room_level;
room_level= 1;// Keep in mind this increments by one then resets
globalvar room_Number;
room_Number=0;

globalvar room_array;

//LIST of all ROOMS: OH GOD SAVE THE QUEEN
room_array[0,0]=rm_First;
room_array[0,1]=rm_FirstDark;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allow_clock =true;
space_check = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//note that we can set ARRAYS EQUAL TO ROOMS

//Vertical collision
    if (!place_meeting(x, y+vspeed+1, par_wall))
    {
       gravity=0.7;
       obj_clock.gravity=0.7;
    
      // sprite_index=spr_fall;
    }
    else
    {
        obj_clock.gravity=0;
        gravity=0;
        vspeed=0;
        obj_clock.vspeed=0;
        grounded=1;
        sprite_index=spr_idle;
        image_speed=0.1;
    } 
//key inputs
Key_Right=keyboard_check_direct(vk_right);
Key_Left=keyboard_check_direct(vk_left);
Key_Up=keyboard_check_direct(vk_up);
Key_Down=keyboard_check_direct(vk_down);
warp=keyboard_check_direct(vk_space);
//transition code
if (alarm[0]==-1)alarm[0]=240;
if (warp){
    if (space_check == true){
        if(current_room == 0){ 
        room_goto(rm_trans);
        //room_goto(rm_apocWorld); 
        obj_clock.gravity=0;
        obj_clock.vspeed=0;
        disablekey=1;
        alarm[0]=240;
        if(x&gt;320&amp;&amp;x&lt;3680){
            instance_create(x-320,0,obj_trans_fw);
        }
        else if(x&gt;3680){
            instance_create(3360,0,obj_trans_fw);
        }
        else{
            instance_create(0,0,obj_trans_fw);
        }
        
        }
    else if(current_room==1){
        room_goto(rm_trans);
        //room_goto(rm_regWorld); 
        obj_clock.gravity=0;
        obj_clock.vspeed=0;
        disablekey=1;
        alarm[0]=240;
        if(x&gt;320&amp;&amp;x&lt;3680){
            instance_create(x-320,0,obj_trans_bw);
        }
        else if(x&gt;3680){
            instance_create(3360,0,obj_trans_bw);
        }
        else{
            instance_create(0,0,obj_trans_bw);
        }
        }
        space_check = false;
    }
    
}
//collision with Key
if(place_meeting(x,y,obj_red_key)){  // note that currently only one key can be present
    keyget=1;
    //instance_create(x-22,y-64,obj_red_invkey); // for creating objecct inventory follow
}
//Key-Door Collision 
if(place_meeting(x,y,par_door)){
    if(Key_Up){
        if (keyget==1)doorOpen=1;
    }
}
//Normal door
/*if(place_meeting(x,y,par_NormDoor)){
    if(Key_Up){
        doorOpenNOKey=1;
    }
}*/
//movement
if(!disablekey){
     
    //ladder collision
    if (place_meeting(x,y,obj_ladder)==true)
    {
         flag=true;
         sprite_index=spr_climb;
        while(flag)
        {
            if ((Key_Up) and (place_meeting(x,y,obj_ladder)==true))
            {
                obj_clock.vspeed=-1;
                vspeed= -1;
                obj_clock.gravity-=0;
                gravity = 0;
                grounded = 0;
                
            }
                
            if ((Key_Down) and (place_meeting(x,y,obj_ladder)==true) and (!place_meeting(x,y+vspeed+1,par_wall)))
            {
                obj_clock.vspeed=+4;
                vspeed= +4;
                obj_clock.gravity=0;
                gravity = 0;
                grounded = 0;
            }
        else
        {
                obj_clock.vspeed=0;
                vspeed=0;
                obj_clock.gravity=0;
                gravity = 0;
                grounded = 1;
        }
            flag = false;
        }   
    
    }

    if(Key_Left)
    {
        if place_meeting(x - 5, y, par_wall) x +=0;
        else{
        x -=5;
        obj_clock.x-=5;
        image_xscale=-1;
        sprite_index=spr_walk;
        image_speed=0.5;
        }
    }
    
    if(Key_Right)
    {
        if place_meeting(x + 5, y, par_wall) x+=0;
        else{
        x +=5;
        obj_clock.x+=5;
        image_xscale=1;
        sprite_index=spr_walk;
        
        image_speed=0.5;
        }
    }
    if(!flag){
        if(Key_Up)
        {
            if(grounded){
                obj_clock.vspeed=-10;
                vspeed=-10;
                grounded=0;
            }
        }
    }
   
}
else{
vspeed=0;
obj_clock.gravity=0;
gravity=0;
hspeed=0;
}

x=min(x,room_width);
x=max(x,45);
//note death when go through door and need to code new reset no button
//note that currently death does not exist

if(y&gt;480) // note death size may have to change // change to view  ****** originially room_height
{
    //show_message("You lose hit the button to restart");
    instance_create(x,view_yview-200,obj_gameOver);
    obj_clock.vspeed=0;
    obj_clock.hspeed=0;

    vspeed=0;
    hspeed=0;
    self.visible=false;
    obj_clock.visible=false;
    disablekey=1; 
    allow_restart=1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(allow_restart){
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>46,46</point>
  </PhysicsShapePoints>
</object>
